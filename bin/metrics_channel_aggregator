#!/usr/bin/env ruby

require "getoptlong"
require "ostruct"
require "metrics_channel"
require "pp"

@options = OpenStruct.new
@options.broker     = "localhost"
@options.input      = 1000
@options.output     = 60000

def usage(exit_code, message = nil)
  print "Error: #{message}\n\n" unless message.nil?

  print <<'END_OF_USAGE'

Usage: metrics_channel_publisher -c <collector>

  --help, -?
    Print this usage text.

END_OF_USAGE

  exit exit_code
end

getopt_options = [
  [ "--help",             "-?",     GetoptLong::NO_ARGUMENT ],
  [ "--broker",           "-b",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--input",            "-i",     GetoptLong::REQUIRED_ARGUMENT ],
  [ "--output",           "-o",     GetoptLong::REQUIRED_ARGUMENT ],
]

getopt = GetoptLong.new(*getopt_options)

getopt.each do |opt, arg|
  case opt
    when "--help"
      usage 0
    when "--broker"
      @options.broker = arg
    when "--input"
      @options.input = arg.to_i
    when "--output"
      @options.output = arg.to_i
  end
end

puts "Aggregating from #{@options.input} to #{@options.output}"

EventMachine.run do
  channel = MetricsChannel::Channel.new(@options.broker)

  channel.establish_queue
  channel.subscribe_period(@options.input)

  aggregations = {}

  EventMachine.add_periodic_timer(@options.input / 1000.0) do
    aggregations.each do |name, aggregation|
      aggregation[:samples].prune_older_than(@options.output)
    end
  end

  EventMachine.add_periodic_timer(1.0) do
    time = Time.now.utc.to_i*1000
    
    if time % @options.output == 0
      aggregations.each do |name, aggregation|
        puts "Generating aggregate for #{name}"
        headers = aggregation[:recent][:headers].dup
        headers[:period] = @options.output
        aggregate = aggregation[:samples].combine
        channel.send_metrics(@options.output, aggregate, name, headers)
      end
    end
  end

  channel.receive do |metadata, metrics|
    puts "Message from route #{metadata.routing_key}"

    aggregation = aggregations[metadata.routing_key] ||= {
      :recent => nil,
      :samples => PeriodicMetrics.new(@options.output / @options.input),
    }

    aggregation[:recent] = {
      :headers => metadata.headers,
      :metrics => metrics,
    }
    aggregation[:samples].add_sample(metrics)
  end

  trap("INT") do
    channel.close { EventMachine.stop }
  end
end